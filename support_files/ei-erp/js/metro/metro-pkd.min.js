/* Metro Touch Handler */
function addTouchEvents(e) {
    if (hasTouch) {
        e.addEventListener("touchstart", touch2Mouse, true);
        e.addEventListener("touchmove", touch2Mouse, true);
        e.addEventListener("touchend", touch2Mouse, true)
    }
}

function touch2Mouse(e) {
    var t = e.changedTouches[0];
    var n;
    switch (e.type) {
        case "touchstart":
            n = "mousedown";
            break;
        case "touchend":
            n = "mouseup";
            break;
        case "touchmove":
            n = "mousemove";
            break;
        default:
            return
    }
    if (n == "mousedown") {
        eventTimer = (new Date).getMilliseconds();
        startX = t.clientX;
        startY = t.clientY;
        mouseDown = true
    }
    if (n == "mouseup") {
        if ((new Date).getMilliseconds() - eventTimer <= 500) {
            n = "click"
        }
        mouseDown = false
    }
    if (n == "mousemove") {
        if (mouseDown) {
            deltaX = t.clientX - startX;
            deltaY = t.clientY - startY;
            moveDirection = deltaX > deltaY ? "horizontal" : "vertical"
        }
    }
    var r = document.createEvent("MouseEvent");
    r.initMouseEvent(n, true, true, window, 1, t.screenX, t.screenY, t.clientX, t.clientY, false, false, false, false, 0, null);
    t.target.dispatchEvent(r);
    e.preventDefault()
};
var hasTouch = "ontouchend" in window,
    eventTimer;
var moveDirection = "undefined",
    startX, startY, deltaX, deltaY, mouseDown = false;
/* Metro Accordion */
(function(e) {
    e.widget("metro.accordion", {
        version: "1.0.0",
        options: {
            closeAny: true,
            open: function(e) {},
            action: function(e) {}
        },
        _frames: {},
        _create: function() {
            var e = this.element;
            if (e.data("closeany") != undefined) this.options.closeAny = e.data("closeany");
            this._frames = e.children(".accordion-frame");
            this.init()
        },
        init: function() {
            var t = this;
            this._frames.each(function() {
                var n = this,
                    r = e(this).children(".heading"),
                    i = e(this).children(".content");
                if (e(r).hasClass("active") && !e(r).attr("disabled") && e(r).data("action") != "none") {
                    e(i).show();
                    e(r).removeClass("collapsed")
                } else {
                    e(r).addClass("collapsed")
                }
                r.on("click", function(r) {
                    r.preventDefault();
                    if (e(this).attr("disabled") || e(this).data("action") === "none") return;
                    if (t.options.closeAny) t._closeFrames();
                    if (e(i).is(":hidden")) {
                        e(i).slideDown(800, "easeOutBounce");
                        e(this).removeClass("collapsed");
                        t._trigger("frame", event, {
                            frame: n
                        });
                        t.options.open(n)
                    } else {
                        e(i).slideUp();
                        e(this).addClass("collapsed")
                    }
                    t.options.action(n)
                })
            })
        },
        _closeFrames: function() {
            this._frames.children(".content").slideUp().parent().children(".heading").addClass("collapsed")
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=accordion]").accordion()
});
/* Metro button set */
(function(e) {
    e.widget("metro.buttonset", {
        version: "1.0.0",
        options: {
            click: function(e, t) {}
        },
        _buttons: {},
        _create: function() {
            var e = this.element;
            this._buttons = e.find("button, .button");
            this.init()
        },
        init: function() {
            var t = this;
            this._buttons.each(function() {
                var n = e(this);
                n.on("click", function(e) {
                    e.preventDefault();
                    n.toggleClass("active");
                    t.options.click(n, n.hasClass("active"));
                    t._trigger("click", event, {
                        button: n,
                        on: n.hasClass("active")
                    })
                })
            })
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
(function(e) {
    e.widget("metro.buttongroup", {
        version: "1.0.0",
        options: {
            click: function(e, t) {}
        },
        _buttons: {},
        _create: function() {
            var e = this.element;
            this._buttons = e.find("button, .button");
            this.init()
        },
        init: function() {
            var t = this;
            this._buttons.each(function() {
                var n = e(this);
                n.on("click", function(e) {
                    e.preventDefault();
                    t._buttons.removeClass("active");
                    n.addClass("active");
                    t.options.click(n, n.hasClass("active"));
                    t._trigger("click", event, {
                        button: n,
                        on: n.hasClass("active")
                    })
                })
            })
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=button-set]").buttonset();
    $("[data-role=button-group]").buttongroup()
});
/* Metro Date-format */
/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */
// this is a temporary solutio
var dateFormat = function() {
    var e = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
        t = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        n = /[^-+\dA-Z]/g,
        r = function(e, t) {
            e = String(e);
            t = t || 2;
            while (e.length < t) e = "0" + e;
            return e
        };
    return function(i, s, o) {
        var u = dateFormat;
        if (arguments.length == 1 && Object.prototype.toString.call(i) == "[object String]" && !/\d/.test(i)) {
            s = i;
            i = undefined
        }
        i = i ? new Date(i) : new Date;
        s = String(u.masks[s] || s || u.masks["default"]);
        if (s.slice(0, 4) == "UTC:") {
            s = s.slice(4);
            o = true
        }
        var a = o ? "getUTC" : "get",
            f = i[a + "Date"](),
            l = i[a + "Day"](),
            c = i[a + "Month"](),
            h = i[a + "FullYear"](),
            p = i[a + "Hours"](),
            d = i[a + "Minutes"](),
            v = i[a + "Seconds"](),
            m = i[a + "Milliseconds"](),
            g = o ? 0 : i.getTimezoneOffset(),
            y = {
                d: f,
                dd: r(f),
                ddd: u.i18n.dayNames[l],
                dddd: u.i18n.dayNames[l + 7],
                m: c + 1,
                mm: r(c + 1),
                mmm: u.i18n.monthNames[c],
                mmmm: u.i18n.monthNames[c + 12],
                yy: String(h).slice(2),
                yyyy: h,
                h: p % 12 || 12,
                hh: r(p % 12 || 12),
                H: p,
                HH: r(p),
                M: d,
                MM: r(d),
                s: v,
                ss: r(v),
                l: r(m, 3),
                L: r(m > 99 ? Math.round(m / 10) : m),
                t: p < 12 ? "a" : "p",
                tt: p < 12 ? "am" : "pm",
                T: p < 12 ? "A" : "P",
                TT: p < 12 ? "AM" : "PM",
                Z: o ? "UTC" : (String(i).match(t) || [""]).pop().replace(n, ""),
                o: (g > 0 ? "-" : "+") + r(Math.floor(Math.abs(g) / 60) * 100 + Math.abs(g) % 60, 4),
                S: ["th", "st", "nd", "rd"][f % 10 > 3 ? 0 : (f % 100 - f % 10 != 10) * f % 10]
            };
        return s.replace(e, function(e) {
            return e in y ? y[e] : e.slice(1, e.length - 1)
        })
    }
}();
dateFormat.masks = {
    "default": "ddd mmm dd yyyy HH:MM:ss",
    shortDate: "m/d/yy",
    mediumDate: "mmm d, yyyy",
    longDate: "mmmm d, yyyy",
    fullDate: "dddd, mmmm d, yyyy",
    shortTime: "h:MM TT",
    mediumTime: "h:MM:ss TT",
    longTime: "h:MM:ss TT Z",
    isoDate: "yyyy-mm-dd",
    isoTime: "HH:MM:ss",
    isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
    isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};
dateFormat.i18n = {
    dayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    monthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
Date.prototype.format = function(e, t) {
    return dateFormat(this, e, t)
};
/* Metro calender */
(function(e) {
    e.widget("metro.calendar", {
        version: "1.0.0",
        options: {
            format: "yyyy-mm-dd",
            multiSelect: false,
            startMode: "day",
            months: ["January", " February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthsShort: ["Jan", " Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            weekDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            buttonsNames: ["Today", "Clear"],
            date: new Date,
            buttons: true,
            getDates: function(e) {},
            click: function(e, t) {},
            _storage: []
        },
        _year: 0,
        _month: 0,
        _day: 0,
        _today: new Date,
        _mode: "day",
        _distance: 0,
        _events: [],
        _create: function() {
            var e = this.element;
            if (e.data("multiSelect") != undefined) this.options.multiSelect = e.data("multiSelect");
            if (e.data("format") != undefined) this.options.format = e.data("format");
            if (e.data("date") != undefined) this.options.date = new Date(e.data("date"));
            if (e.data("months") != undefined) this.options.months = e.data("months");
            if (e.data("weekDays") != undefined) this.options.weekDays = e.data("weekDays");
            if (e.data("startMode") != undefined) this.options.startMode = e.data("startMode");
            this._year = this.options.date.getFullYear();
            this._distance = parseInt(this.options.date.getFullYear()) - 4;
            this._month = this.options.date.getMonth();
            this._day = this.options.date.getDate();
            this._mode = this.options.startMode;
            e.data("_storage", []);
            this._renderCalendar()
        },
        _renderMonth: function() {
            var t = this._year,
                n = this._month,
                r = this._day,
                i = 28;
            if (n == 1) {
                if (t % 100 != 0 && t % 4 == 0 || t % 400 == 0) {
                    i = 29
                }
            }
            var s = ["31", "" + i + "", "31", "30", "31", "30", "31", "31", "30", "31", "30", "31"];
            var o = s[n];
            var u = (new Date(t, n, 1)).getDay();
            var a, f, l, c;
            this.element.html("");
            a = e("<table/>").addClass("bordered");
            f = e("<tr/>");
            e("<td/>").addClass("text-center").html("<a class='btn-previous-year' href='#'><i class='icon-previous'></i></a>").appendTo(f);
            e("<td/>").addClass("text-center").html("<a class='btn-previous-month' href='#'><i class='icon-arrow-left-4'></i></a>").appendTo(f);
            e("<td/>").attr("colspan", 3).addClass("text-center").html("<a class='btn-select-month' href='#'>" + this.options.months[n] + " " + t + "</a>").appendTo(f);
            e("<td/>").addClass("text-center").html("<a class='btn-next-month' href='#'><i class='icon-arrow-right-4'></i></a>").appendTo(f);
            e("<td/>").addClass("text-center").html("<a class='btn-next-year' href='#'><i class='icon-next'></i></a>").appendTo(f);
            f.addClass("calendar-header").appendTo(a);
            f = e("<tr/>");
            for (c = 0; c < 7; c++) {
                l = e("<td/>").addClass("text-center day-of-week").html(this.options.weekDays[c]).appendTo(f)
            }
            f.addClass("calendar-subheader").appendTo(a);
            f = e("<tr/>");
            for (c = 0; c < u; c++) {
                l = e("<td/>").addClass("empty").html("").appendTo(f)
            }
            var h = u;
            for (c = 1; c <= o; c++) {
                h %= 7;
                if (h == 0) {
                    f.appendTo(a);
                    f = e("<tr/>")
                }
                l = e("<td/>").addClass("text-center day").html("<a href='#'>" + c + "</a>");
                if (t == this._today.getFullYear() && n == this._today.getMonth() && this._today.getDate() == c) {
                    l.addClass("today")
                }
                var p = (new Date(this._year, this._month, c)).format("yyyy-mm-dd");
                if (this.element.data("_storage").indexOf(p) >= 0) {
                    l.find("a").addClass("selected")
                }
                l.appendTo(f);
                h++
            }
            for (c = h + 1; c <= 7; c++) {
                l = e("<td/>").addClass("empty").html("").appendTo(f)
            }
            f.appendTo(a);
            if (this.options.buttons) {
                f = e("<tr/>").addClass("calendar-actions");
                l = e("<td/>").attr("colspan", 7).addClass("text-left").html("" + "<button class='button calendar-btn-today small success'>" + this.options.buttonsNames[0] + "</button>&nbsp;<button class='button calendar-btn-clear small warning'>" + this.options.buttonsNames[1] + "</button>");
                l.appendTo(f);
                f.appendTo(a)
            }
            a.appendTo(this.element);
            this.options.getDates(this.element.data("_storage"))
        },
        _renderMonths: function() {
            var t, n, r, i, s;
            this.element.html("");
            t = e("<table/>").addClass("bordered");
            n = e("<tr/>");
            e("<td/>").addClass("text-center").html("<a class='btn-previous-year' href='#'><i class='icon-arrow-left-4'></i></a>").appendTo(n);
            e("<td/>").attr("colspan", 2).addClass("text-center").html("<a class='btn-select-year' href='#'>" + this._year + "</a>").appendTo(n);
            e("<td/>").addClass("text-center").html("<a class='btn-next-year' href='#'><i class='icon-arrow-right-4'></i></a>").appendTo(n);
            n.addClass("calendar-header").appendTo(t);
            n = e("<tr/>");
            s = 0;
            for (i = 0; i < 12; i++) {
                r = e("<td/>").addClass("text-center month").html("<a href='#' data-month='" + i + "'>" + this.options.monthsShort[i] + "</a>");
                if (this._month == i && (new Date).getFullYear() == this._year) {
                    r.addClass("today")
                }
                r.appendTo(n);
                if ((s + 1) % 4 == 0) {
                    n.appendTo(t);
                    n = e("<tr/>")
                }
                s += 1
            }
            t.appendTo(this.element)
        },
        _renderYears: function() {
            var t, n, r, i, s;
            this.element.html("");
            t = e("<table/>").addClass("bordered");
            n = e("<tr/>");
            e("<td/>").addClass("text-center").html("<a class='btn-previous-year' href='#'><i class='icon-arrow-left-4'></i></a>").appendTo(n);
            e("<td/>").attr("colspan", 2).addClass("text-center").html(this._distance + "-" + (this._distance + 11)).appendTo(n);
            e("<td/>").addClass("text-center").html("<a class='btn-next-year' href='#'><i class='icon-arrow-right-4'></i></a>").appendTo(n);
            n.addClass("calendar-header").appendTo(t);
            n = e("<tr/>");
            s = 0;
            for (i = this._distance; i < this._distance + 12; i++) {
                r = e("<td/>").addClass("text-center year").html("<a href='#' data-year='" + i + "'>" + i + "</a>");
                if ((new Date).getFullYear() == i) {
                    r.addClass("today")
                }
                r.appendTo(n);
                if ((s + 1) % 4 == 0) {
                    n.appendTo(t);
                    n = e("<tr/>")
                }
                s += 1
            }
            t.appendTo(this.element)
        },
        _renderCalendar: function() {
            switch (this._mode) {
                case "year":
                    this._renderYears();
                    break;
                case "month":
                    this._renderMonths();
                    break;
                default:
                    this._renderMonth()
            }
            this._initButtons()
        },
        _initButtons: function() {
            var t = this,
                n = this.element.find("table");
            if (this._mode == "day") {
                n.find(".btn-select-month").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    t._mode = "month";
                    t._renderCalendar()
                });
                n.find(".btn-previous-month").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    t._month -= 1;
                    if (t._month < 0) {
                        t._year -= 1;
                        t._month = 11
                    }
                    t._renderCalendar()
                });
                n.find(".btn-next-month").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    t._month += 1;
                    if (t._month == 12) {
                        t._year += 1;
                        t._month = 0
                    }
                    t._renderCalendar()
                });
                n.find(".btn-previous-year").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    t._year -= 1;
                    t._renderCalendar()
                });
                n.find(".btn-next-year").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    t._year += 1;
                    t._renderCalendar()
                });
                n.find(".calendar-btn-today").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    t.options.date = new Date;
                    t._year = t.options.date.getFullYear();
                    t._month = t.options.date.getMonth();
                    t._day = t.options.date.getDate();
                    t._renderCalendar()
                });
                n.find(".calendar-btn-clear").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    t.options.date = new Date;
                    t._year = t.options.date.getFullYear();
                    t._month = t.options.date.getMonth();
                    t._day = t.options.date.getDate();
                    t.element.data("_storage", []);
                    t._renderCalendar()
                });
                n.find(".day a").on("click", function(r) {
                    r.preventDefault();
                    r.stopPropagation();
                    var i = (new Date(t._year, t._month, parseInt(e(this).html()))).format(t.options.format);
                    var s = new Date(t._year, t._month, parseInt(e(this).html()));
                    if (t.options.multiSelect) {
                        e(this).toggleClass("selected");
                        if (e(this).hasClass("selected")) {
                            t._addDate(i)
                        } else {
                            t._removeDate(i)
                        }
                    } else {
                        n.find(".day a").removeClass("selected");
                        e(this).addClass("selected");
                        t.element.data("_storage", []);
                        t._addDate(i)
                    }
                    t.options.getDates(t.element.data("_storage"));
                    t.options.click(i, s)
                })
            } else if (this._mode == "month") {
                n.find(".month a").on("click", function(n) {
                    n.preventDefault();
                    n.stopPropagation();
                    t._month = parseInt(e(this).data("month"));
                    t._mode = "day";
                    t._renderCalendar()
                });
                n.find(".btn-previous-year").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    t._year -= 1;
                    t._renderCalendar()
                });
                n.find(".btn-next-year").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    t._year += 1;
                    t._renderCalendar()
                });
                n.find(".btn-select-year").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    t._mode = "year";
                    t._renderCalendar()
                })
            } else {
                n.find(".year a").on("click", function(n) {
                    n.preventDefault();
                    n.stopPropagation();
                    t._year = parseInt(e(this).data("year"));
                    t._mode = "month";
                    t._renderCalendar()
                });
                n.find(".btn-previous-year").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    t._distance -= 10;
                    t._renderCalendar()
                });
                n.find(".btn-next-year").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    t._distance += 10;
                    t._renderCalendar()
                })
            }
        },
        _addDate: function(e) {
            var t = this.element.data("_storage").indexOf(e);
            if (t < 0) this.element.data("_storage").push(e)
        },
        _removeDate: function(e) {
            var t = this.element.data("_storage").indexOf(e);
            this.element.data("_storage").splice(t, 1)
        },
        setDate: function(e) {
            var t;
            e = new Date(e);
            t = (new Date(e.getFullYear() + "/" + (e.getMonth() + 1) + "/" + e.getDate())).format("yyyy-mm-dd");
            this._addDate(t);
            this._renderCalendar()
        },
        getDate: function(e) {
            return (new Date(e != undefined ? this.element.data("_storage")[e] : this.element.data("_storage")[0])).format(this.options.format)
        },
        getDates: function() {
            return this.element.data("_storage")
        },
        unsetDate: function(e) {
            var t;
            e = new Date(e);
            t = (new Date(e.getFullYear() + "-" + (e.getMonth() + 1) + "-" + e.getDate())).format("yyyy-mm-dd");
            this._removeDate(t);
            this._renderCalendar()
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=calendar]").calendar()
});

/* Metro Date-picker */
(function(e) {
    e.widget("metro.datepicker", {
        version: "1.0.0",
        options: {
            format: "dd.mm.yyyy",
            date: undefined,
            effect: "none",
            position: "bottom",
            selected: function(e, t) {},
            _calendar: undefined
        },
        _create: function() {
            var t = this,
                n = this.element,
                r = n.children("input"),
                i = n.children("button.btn-date");
            if (n.data("date") != undefined) this.options.date = n.data("date");
            if (n.data("format") != undefined) this.options.format = n.data("format");
            if (n.data("effect") != undefined) this.options.effect = n.data("effect");
            if (n.data("position") != undefined) this.options.position = n.data("position");
            this._createCalendar(n, this.options.date);
            r.attr("readonly", true);
            i.on("click", function(e) {
                e.stopPropagation();
                if (t.options._calendar.css("display") == "none") {
                    t._show()
                } else {
                    t._hide()
                }
            });
            n.on("click", function(e) {
                e.stopPropagation();
                if (t.options._calendar.css("display") == "none") {
                    t._show()
                } else {
                    t._hide()
                }
            });
            e("html").on("click", function(t) {
                e(".calendar-dropdown").hide()
            })
        },
        _createCalendar: function(t, n) {
            var r, i = this;
            r = e("<div/>").css({
                position: "absolute",
                display: "none",
                "max-width": 260,
                "z-index": 1e3
            }).addClass("calendar calendar-dropdown").appendTo(t);
            if (i.options.date != undefined) {
                r.data("date", i.options.date)
            }
            r.calendar({
                multiSelect: false,
                format: i.options.format,
                buttons: false,
                click: function(e, n) {
                    r.calendar("setDate", n);
                    t.children("input[type=text]").val(e);
                    i.options.selected(e, n);
                    i._hide()
                }
            });
            if (n != undefined) {
                r.calendar("setDate", n);
                t.children("input[type=text]").val(r.calendar("getDate"))
            }
            switch (this.options.position) {
                case "top":
                    r.css({
                        top: 0 - r.height(),
                        left: 0
                    });
                    break;
                default:
                    r.css({
                        top: "100%",
                        left: 0
                    })
            }
            this.options._calendar = r
        },
        _show: function() {
            if (this.options.effect == "slide") {
                e(".calendar-dropdown").slideUp("fast");
                this.options._calendar.slideDown("fast")
            } else if (this.options.effect == "fade") {
                e(".calendar-dropdown").fadeOut("fast");
                this.options._calendar.fadeIn("fast")
            } else {
                e(".calendar-dropdown").hide();
                this.options._calendar.show()
            }
        },
        _hide: function() {
            if (this.options.effect == "slide") {
                this.options._calendar.slideUp("fast")
            } else if (this.options.effect == "fade") {
                this.options._calendar.fadeOut("fast")
            } else {
                this.options._calendar.hide()
            }
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=datepicker]").datepicker()
});
/* Metro Carousel */
(function(e) {
    e.widget("metro.carousel", {
        version: "1.0.0",
        options: {
            auto: true,
            period: 2e3,
            duration: 500,
            effect: "slowdown",
            direction: "left",
            markers: {
                show: true,
                type: "default",
                position: "left"
            },
            controls: true,
            stop: true,
            width: "100%",
            height: 300
        },
        _slides: {},
        _currentIndex: 0,
        _interval: 0,
        _outPosition: 0,
        _create: function() {
            var e = this,
                t = this.element,
                n = t.find(".controls");
            t.css({
                width: this.options.width,
                height: this.options.height
            });
            this._slides = t.find(".slide");
            if (this._slides.length <= 1) return;
            if (this.options.markers !== false && this.options.markers.show && this._slides.length > 1) {
                this._markers(e)
            }
            if (this.options.controls && this._slides.length > 1) {
                t.find(".controls.left").on("click", function() {
                    e._slideTo("prior")
                });
                t.find(".controls.right").on("click", function() {
                    e._slideTo("next")
                })
            } else {
                n.hide()
            }
            if (this.options.stop) {
                t.on("mouseenter", function() {
                    clearInterval(e._interval)
                }).on("mouseleave", function() {
                    if (e.options.auto) e._autoStart(), e.options.period
                })
            }
            if (this.options.auto) {
                this._autoStart()
            }
        },
        _autoStart: function() {
            var e = this;
            this._interval = setInterval(function() {
                if (e.options.direction == "left") {
                    e._slideTo("next")
                } else {
                    e._slideTo("prior")
                }
            }, this.options.period)
        },
        _slideTo: function(t) {
            var n = this._slides[this._currentIndex],
                r;
            if (t == undefined) t = "next";
            if (t === "prior") {
                this._currentIndex -= 1;
                if (this._currentIndex < 0) this._currentIndex = this._slides.length - 1;
                this._outPosition = this.element.width()
            } else if (t === "next") {
                this._currentIndex += 1;
                if (this._currentIndex >= this._slides.length) this._currentIndex = 0;
                this._outPosition = -this.element.width()
            }
            r = this._slides[this._currentIndex];
            switch (this.options.effect) {
                case "switch":
                    this._effectSwitch(n, r);
                    break;
                case "slowdown":
                    this._effectSlowdown(n, r, this.options.duration);
                    break;
                case "fade":
                    this._effectFade(n, r, this.options.duration);
                    break;
                default:
                    this._effectSlide(n, r, this.options.duration)
            }
            var i = this.element,
                s = this;
            i.find(".markers ul li a").each(function() {
                var t = e(this).data("num");
                if (t === s._currentIndex) {
                    e(this).parent().addClass("active")
                } else {
                    e(this).parent().removeClass("active")
                }
            })
        },
        _slideToSlide: function(e) {
            var t = this._slides[this._currentIndex],
                n = this._slides[e];
            if (e > this._currentIndex) {
                this._outPosition = -this.element.width()
            } else {
                this._outPosition = this.element.width()
            }
            switch (this.options.effect) {
                case "switch":
                    this._effectSwitch(t, n);
                    break;
                case "slowdown":
                    this._effectSlowdown(t, n, this.options.duration);
                    break;
                case "fade":
                    this._effectFade(t, n, this.options.duration);
                    break;
                default:
                    this._effectSlide(t, n, this.options.duration)
            }
            this._currentIndex = e
        },
        _markers: function(t) {
            var n, r, i, s, o;
            n = e('<div class="markers ' + this.options.markers.type + '" />');
            r = e("<ul></ul>").appendTo(n);
            for (s = 0; s < this._slides.length; s++) {
                i = e('<li><a href="javascript:void(0)" data-num="' + s + '"></a></li>');
                if (s === 0) {
                    i.addClass("active")
                }
                i.appendTo(r)
            }
            r.find("li a").removeClass("active").on("click", function() {
                var n = e(this),
                    i = n.data("num");
                r.find("li").removeClass("active");
                n.parent().addClass("active");
                if (i == t._currentIndex) {
                    return true
                }
                t._slideToSlide(i);
                return true
            });
            n.appendTo(this.element);
            switch (this.options.markers.position) {
                case "top-left":
                    {
                        n.css({
                            left: "10px",
                            right: "auto",
                            bottom: "auto",
                            top: "10px"
                        });
                        break
                    };
                case "top-right":
                    {
                        n.css({
                            left: "auto",
                            right: "10px",
                            bottom: "auto",
                            top: "0px"
                        });
                        break
                    };
                case "top-center":
                    {
                        n.css({
                            left: this.element.width() / 2 - n.width() / 2,
                            right: "auto",
                            bottom: "auto",
                            top: "0px"
                        });
                        break
                    };
                case "bottom-left":
                    {
                        n.css({
                            left: "10px",
                            right: "auto"
                        });
                        break
                    };
                case "bottom-right":
                    {
                        n.css({
                            right: "10px",
                            left: "auto"
                        });
                        break
                    };
                case "bottom-center":
                    {
                        n.css({
                            left: this.element.width() / 2 - n.width() / 2,
                            right: "auto"
                        });
                        break
                    }
            }
        },
        _effectSwitch: function(t, n) {
            e(t).hide();
            e(n).css({
                left: 0
            }).show()
        },
        _effectSlide: function(t, n, r) {
            e(t).animate({
                left: this._outPosition
            }, r);
            e(n).css("left", this._outPosition * -1).show().animate({
                left: 0
            }, r)
        },
        _effectSlowdown: function(t, n, r) {
            var i = {
                duration: r,
                easing: "doubleSqrt"
            };
            e.easing.doubleSqrt = function(e) {
                return Math.sqrt(Math.sqrt(e))
            };
            e(t).animate({
                left: this._outPosition
            }, i);
            e(n).css("left", this._outPosition * -1).show().animate({
                left: 0
            }, i)
        },
        _effectFade: function(t, n, r) {
            e(t).fadeOut(r);
            e(n).css({
                left: 0
            }).fadeIn(r)
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=carousel]").carousel()
});
/* Metro Countdown */
(function(e) {
    e.widget("metro.countdown", {
        version: "1.0.0",
        options: {
            style: {
                background: "bg-dark",
                foreground: "fg-white",
                divider: "fg-dark"
            },
            blink: true,
            days: 1,
            stoptimer: 0,
            ontick: function(e, t, n, r) {},
            onstop: function() {}
        },
        wrappers: {},
        _interval: 0,
        _create: function() {
            var t = this,
                n = this.element;
            e.each(["Days", "Hours", "Minutes", "Seconds"], function() {
                e('<span class="count' + this + '">').html('<span class="digit-wrapper">                        <span class="digit">0</span>                    </span>                    <span class="digit-wrapper">                        <span class="digit">0</span>                    </span>').appendTo(n);
                if (this != "Seconds") {
                    n.append('<span class="divider"></span>')
                }
            });
            this.wrappers = this.element.find(".digit-wrapper");
            if (n.data("blink") != undefined) {
                this.options.blink = n.data("blick")
            }
            if (n.data("styleBackground") != undefined) {
                this.options.style.background = n.data("styleBackground")
            }
            if (n.data("styleForeground") != undefined) {
                this.options.style.foreground = n.data("styleForeground")
            }
            if (n.data("styleDivider") != undefined) {
                this.options.style.divider = n.data("styleDivider")
            }
            if (this.options.style.background != "default") {
                this.element.find(".digit").addClass(this.options.style.background)
            }
            if (this.options.style.foreground != "default") {
                this.element.find(".digit").addClass(this.options.style.foreground)
            }
            if (this.options.style.divider != "default") {
                this.element.find(".divider").addClass(this.options.style.divider)
            }
            if (n.data("stoptimer") != undefined) {
                this.options.stoptimer = new Date(n.data("stoptimer"))
            }
            if (this.options.stoptimer == 0) {
                this.options.stoptimer = (new Date).getTime() + this.options.days * 24 * 60 * 60 * 1e3
            }
            setTimeout(function() {
                t.tick()
            }, 1e3)
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        },
        tick: function() {
            var e = this;
            this._interval = setInterval(function() {
                var t = 24 * 60 * 60,
                    n = 60 * 60,
                    r = 60;
                var i, s, o, u, a;
                i = Math.floor((e.options.stoptimer - new Date) / 1e3);
                if (i < 0) {
                    i = 0
                }
                s = Math.floor(i / t);
                e.updateDuo(0, 1, s);
                i -= s * t;
                o = Math.floor(i / n);
                e.updateDuo(2, 3, o);
                i -= o * n;
                u = Math.floor(i / r);
                e.updateDuo(4, 5, u);
                i -= u * r;
                a = i;
                e.updateDuo(6, 7, a);
                e.options.ontick(s, o, u, a);
                e.blinkDivider();
                if (s === 0 && o === 0 && u === 0 && a === 0) {
                    e.options.onstop();
                    e.stopDigit();
                    e._trigger("alarm");
                    clearInterval(e._interval)
                }
            }, 1e3)
        },
        blinkDivider: function() {
            if (this.options.blink) this.element.find(".divider").toggleClass("no-visible")
        },
        stopDigit: function() {
            this.wrappers.each(function() {
                e(this).children(".digit").addClass("stop")
            })
        },
        updateDuo: function(e, t, n) {
            this.switchDigit(this.wrappers.eq(e), Math.floor(n / 10) % 10);
            this.switchDigit(this.wrappers.eq(t), n % 10)
        },
        switchDigit: function(t, n) {
            var r = t.find(".digit");
            if (r.is(":animated")) {
                return false
            }
            if (t.data("digit") == n) {
                return false
            }
            t.data("digit", n);
            var i = e("<span>", {
                "class": "digit",
                css: {
                    top: "-2.1em",
                    opacity: 0
                },
                html: n
            });
            i.addClass(this.options.style.background);
            i.addClass(this.options.style.foreground);
            r.before(i).removeClass("static").animate({
                top: "2.5em"
            }, "fast", function() {
                r.remove()
            });
            i.delay(100).animate({
                top: 0,
                opacity: 1
            }, "fast");
            return true
        }
    })
})(jQuery);
$(function() {
    $("[data-role=countdown]").countdown()
});

/* Metro Dialogue */
(function(e) {
    var t = false;
    e.Dialog = function(n) {
        if (!e.Dialog.opened) {
            e.Dialog.opened = true
        } else {
            return t
        }
        e.Dialog.settings = n;
        n = e.extend({
            icon: false,
            title: "",
            content: "",
            flat: false,
            shadow: false,
            overlay: false,
            width: "auto",
            height: "auto",
            position: "default",
            padding: false,
            overlayClickClose: true,
            sysButtons: {
                btnClose: true
            },
            onShow: function(e) {}
        }, n);
        var r, i, s, o;
        r = e("<div/>").addClass("metro window-overlay");
        if (n.overlay) {
            r.css({
                backgroundColor: "rgba(0,0,0,.7)"
            })
        }
        i = e("<div/>").addClass("window");
        if (n.flat) i.addClass("flat");
        if (n.shadow) i.addClass("shadow").css("overflow", "hidden");
        s = e("<div/>").addClass("caption");
        o = e("<div/>").addClass("content");
        o.css({
            paddingTop: 32 + n.padding,
            paddingLeft: n.padding,
            paddingRight: n.padding,
            paddingBottom: n.padding
        });
        if (n.sysButtons) {
            if (n.sysButtons.btnClose) {
                e("<button/>").addClass("btn-close").on("click", function(t) {
                    t.preventDefault();
                    t.stopPropagation();
                    e.Dialog.close()
                }).appendTo(s)
            }
            if (n.sysButtons.btnMax) {
                e("<button/>").addClass("btn-max").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation()
                }).appendTo(s)
            }
            if (n.sysButtons.btnMin) {
                e("<button/>").addClass("btn-min").on("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation()
                }).appendTo(s)
            }
        }
        if (n.icon) e(n.icon).addClass("icon").appendTo(s);
        e("<div/>").addClass("title").html(n.title).appendTo(s);
        o.html(n.content);
        s.appendTo(i);
        o.appendTo(i);
        i.appendTo(r);
        if (n.width != "auto") i.css("min-width", n.width);
        if (n.height != "auto") i.css("min-height", n.width);
        r.hide().appendTo("body").fadeIn("fast");
        t = i;
        i.css("position", "fixed").css("top", (e(window).height() - t.outerHeight()) / 2).css("left", (e(window).width() - i.outerWidth()) / 2);
        console.log(e(window).height());
        addTouchEvents(i[0]);
        if (n.draggable) {
            s.on("mousedown", function(t) {
                e.Dialog.drag = true;
                s.css("cursor", "move");
                var n = i.css("z-index"),
                    r = i.outerHeight(),
                    o = i.outerWidth(),
                    u = i.offset().top + r - t.pageY,
                    a = i.offset().left + o - t.pageX;
                i.css("z-index", 99999).parents().on("mousemove", function(t) {
                    var f = t.pageY > 0 ? t.pageY + u - r : 0;
                    var l = t.pageX > 0 ? t.pageX + a - o : 0;
                    if (e.Dialog.drag) {
                        if (f >= 0 && f <= window.innerHeight - i.outerHeight()) {
                            i.offset({
                                top: f
                            })
                        }
                        if (l >= 0 && l <= window.innerWidth - i.outerWidth()) {
                            i.offset({
                                left: l
                            })
                        }
                    }
                    i.on("mouseup", function() {
                        e(this).removeClass("draggable").css("z-index", n);
                        e.Dialog.drag = false;
                        s.css("cursor", "default")
                    })
                });
                t.preventDefault()
            }).on("mouseup", function() {
                i.removeClass("draggable");
                e.Dialog.drag = false;
                s.css("cursor", "default")
            })
        }
        i.on("click", function(e) {
            e.preventDefault();
            e.stopPropagation()
        });
        if (n.overlayClickClose) {
            r.on("click", function(t) {
                t.preventDefault();
                e.Dialog.close()
            })
        }
        n.onShow(t);
        e.Dialog.autoResize();
        return t
    };
    e.Dialog.content = function(n) {
        if (!e.Dialog.opened) {
            return false
        }
        if (n) {
            t.children(".content").html(n);
            e.Dialog.autoResize()
        } else {
            return t.children(".content").html()
        }
    };
    e.Dialog.title = function(n) {
        if (!e.Dialog.opened) {
            return false
        }
        if (n) {
            t.children(".caption > .title").html(n)
        } else {
            t.children(".caption > .title").html()
        }
    };
    e.Dialog.autoResize = function() {
        if (!e.Dialog.opened) {
            return false
        }
        var n = t.children(".content");
        var r = (e(window).height() - t.outerHeight()) / 2;
        var i = (e(window).width() - t.outerWidth()) / 2;
        t.css({
            width: n.width(),
            height: n.height() + 36
        }).css("top", r).css("left", i)
    };
    e.Dialog.close = function() {
        if (!e.Dialog.opened || t == undefined) {
            return false
        }
        e.Dialog.opened = false;
        var n = t.parent(".window-overlay");
        n.fadeOut(function() {
            e(this).remove()
        })
    }
})(jQuery);
/* Metro Drag tile 
(function(e){e.widget("metro.dragtile",{version:"1.0.0",options:{},_create:function(){var e=this,t=tile=this.element,n=t.parents(".tile-area"),r=n.find(".tile"),i=n.find(".tile-group");tile.attr("draggable","true");addTouchEvents(tile[0]);tile[0].addEventListener("dragstart",this._dragStart,false);tile[0].addEventListener("dragend",this._dragEnd,false);tile.on("mousedown",function(e){});tile.on("mouseup",function(e){})},_dragStart:function(t){e(this).css("opacity",.4)},_dragEnd:function(t){e(this).css("opacity",1)},_destroy:function(){},_setOption:function(e,t){this._super("_setOption",e,t)}})})(jQuery);$(function(){$(".tile").dragtile()});
/* Metro Dropdown */
(function(e) {
    e.widget("metro.dropdown", {
        version: "1.0.0",
        options: {
            effect: "slide"
        },
        _create: function() {
            var t = this,
                n = this.element,
                r = this.name,
                i = this.element.parent(),
                s = i.children(".dropdown-toggle");
            if (n.data("effect") != undefined) {
                this.options.effect = n.data("effect")
            }
            s.on("click." + r, function(r) {
				console.log(r);
                r.preventDefault();
                r.stopPropagation();
                if (n.css("display") == "block" && !n.hasClass("keep-open")) {
                    t._close(n)
                } else {
                    e(".dropdown-menu").each(function(r, i) {
                        if (!n.parents(".dropdown-menu").is(i) && !e(i).hasClass("keep-open") && e(i).css("display") == "block") {
                            t._close(i)
                        }
                    });
                    t._open(n)
                }
            });
            e(n).find("li.disabled a").on("click", function(e) {
                e.preventDefault()
            });
            e("html").on("click", function(n) {
                e(".dropdown-menu").each(function(n, r) {
                    if (!e(r).hasClass("keep-open") && e(r).css("display") == "block") {
                        t._close(r)
                    }
                })
            })
        },
        _open: function(t) {
			debugger;
            switch (this.options.effect) {
                case "fade":
                    e(t).fadeIn("fast");
                    break;
                case "slide":
                    e(t).slideDown("fast");
                    break;
                default:
                    e(t).hide()
            }
            this._trigger("onOpen", null, t)
        },
        _close: function(t) {
            switch (this.options.effect) {
                case "fade":
                    e(t).fadeOut("fast");
                    break;
                case "slide":
                    e(t).slideUp("fast");
                    break;
                default:
                    e(t).hide()
            }
            this._trigger("onClose", null, t)
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=dropdown]").dropdown()
});
/* Metro FluentMenu */
(function(e) {
    e.widget("metro.fluentmenu", {
        version: "1.0.0",
        options: {
            onSpecialClick: function(e, t) {},
            onTabClick: function(e, t) {}
        },
        _create: function() {
            var t = this,
                n = this.element,
                r = this.options,
                i = n.find(".tabs-holder > li > a");
            this._hidePanels();
            this._showPanel();
            i.on("click", function(i) {
                if (e(this).parent("li").hasClass("special")) {
                    r.onSpecialClick(i, e(this))
                } else {
                    var s = e(e(this).attr("href"));
                    t._hidePanels();
                    t._showPanel(s);
                    n.find(".tabs-holder > li").removeClass("active");
                    e(this).parent("li").addClass("active");
                    r.onTabClick(i, e(this))
                }
                i.preventDefault()
            })
        },
        _hidePanels: function() {
            this.element.find(".tab-panel").hide()
        },
        _showPanel: function(t) {
            if (t == undefined) {
                t = this.element.find(".tabs-holder li.active a").attr("href")
            }
            e(t).show()
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=fluentmenu]").fluentmenu()
});
/* Metro Hint */
(function(e) {
    e.widget("metro.hint", {
        version: "1.0.0",
        options: {
            position: "bottom",
            _hint: undefined
        },
        _create: function() {
            var t = this,
                n = this.element,
                r = n.data("hint").split("|"),
                i = this.options;
            var s;
            if (n.data("hintPosition") != undefined) i.position = n.data("hintPosition");
            var o = r.length > 1 ? r[0] : false;
            var u = r.length > 1 ? r[1] : r[0];
            s = e("<div/>").addClass("hint").appendTo(n.parent());
            if (o) {
                e("<div/>").addClass("hint-title").html(o).appendTo(s)
            }
            e("<div/>").addClass("hint-text").html(u).appendTo(s);
            s.addClass(i.position);
            if (i.position == "top") {
                s.css({
                    top: n.position().top - s.outerHeight() - 20,
                    left: n.position().left
                })
            } else if (i.position == "bottom") {
                s.css({
                    top: n.position().top + n.outerHeight(),
                    left: n.position().left
                })
            } else if (i.position == "right") {
                s.css({
                    top: n.position().top - 10,
                    left: n.position().left + n.outerWidth() + 10
                })
            } else if (i.position == "left") {
                s.css({
                    top: n.position().top - 10,
                    left: n.position().left - s.outerWidth() - 10
                })
            }
            n.on("mouseenter", function(e) {
                s.fadeIn();
                e.preventDefault()
            });
            n.on("mouseleave", function(e) {
                s.fadeOut();
                e.preventDefault()
            });
            i._hint = s
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-hint]").hint()
});
/* Metro Input Control */
(function(e) {
    e.widget("metro.inputControl", {
        version: "1.0.0",
        options: {},
        _create: function() {
            var e = this,
                t = this.element;
            if (t.hasClass("text")) {
                this.initTextInput(t, e)
            } else if (t.hasClass("password")) {
                this.initPasswordInput()
            } else if (t.hasClass("checkbox") || t.hasClass("radio") || t.hasClass("switch")) {
                this.initCheckboxInput(t, e)
            } else if (t.hasClass("file")) {
                this.initFileInput(t, e)
            }
        },
        initCheckboxInput: function(e, t) {},
        initFileInput: function(t, n) {
            var r, i, s;
            s = e("<input type='text' id='__input_file_wrapper__' readonly style='z-index: 1; cursor: default;'>");
            r = t.children(".btn-file");
            i = t.children('input[type="file"]');
            i.css("z-index", 0);
            s.insertAfter(i);
            i.attr("tabindex", "-1");
            r.attr("type", "button");
            i.on("change", function() {
                var t = e(this).val();
                if (t != "") {
                    s.val(t)
                }
            });
            r.on("click", function() {
                i.trigger("click")
            })
        },
        initTextInput: function(e, t) {
            var n, r;
            n = e.children(".btn-clear");
            if (n.length == 0) return;
            n.attr("tabindex", "-1");
            n.attr("type", "button");
            n.on("click", function() {
                r = e.children("input");
                if (r.prop("readonly")) return;
                r.val("");
                r.focus();
                t._trigger("onClear", null, e)
            })
        },
        initPasswordInput: function() {
            var e = this.element.children(".btn-reveal"),
                t = this.element.children("input[type=password]"),
                n, r = this;
            if (e.length == 0) return;
            e.attr("tabindex", "-1");
            e.attr("type", "button");
            e.on("mousedown", function(e) {
                t.attr("type", "text")
            });
            e.on("mouseup, mouseleave", function(e) {
                t.attr("type", "password").focus()
            })
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=input-control], .input-control").inputControl()
});
(function(e) {
    e.widget("metro.inputTransform", {
        version: "1.0.0",
        options: {
            transformType: "text"
        },
        _create: function() {
            var e = this,
                t = this.element,
                n;
            var r = t.parent().hasClass("input-control");
            if (r) return;
            n = t.get(0).tagName.toLowerCase();
            if (n == "textarea") {
                this.options.transformType = "textarea"
            } else if (n == "select") {
                this.options.transformType = "select"
            } else {
                if (t.data("transformType") != undefined) {
                    this.options.transformType = t.data("transformType")
                } else {
                    this.options.transformType = t.attr("type")
                }
            }
            var i = undefined;
            switch (this.options.transformType) {
                case "password":
                    i = this._createInputPassword();
                    break;
                case "file":
                    i = this._createInputFile();
                    break;
                case "checkbox":
                    i = this._createInputCheckbox();
                    break;
                case "radio":
                    i = this._createInputRadio();
                    break;
                case "switch":
                    i = this._createInputSwitch();
                    break;
                case "select":
                    i = this._createInputSelect();
                    break;
                case "textarea":
                    i = this._createInputTextarea();
                    break;
                case "search":
                    i = this._createInputSearch();
                    break;
                case "email":
                    i = this._createInputEmail();
                    break;
                case "tel":
                    i = this._createInputTel();
                    break;
                default:
                    i = this._createInputText()
            }
            i.inputControl()
        },
        _createInputTextarea: function() {
            var t = this.element;
            var n = e("<div/>").addClass("input-control").addClass("textarea");
            var r = t.clone(true);
            var i = t.parent();
            n.appendTo(i);
            r.appendTo(n);
            t.remove();
            return n
        },
        _createInputSelect: function() {
            var t = this.element;
            var n = e("<div/>").addClass("input-control").addClass("select");
            var r = t.clone(true);
            var i = t.parent();
            n.appendTo(i);
            r.appendTo(n);
            t.remove();
            return n
        },
        _createInputSwitch: function() {
            var t = this.element;
            var n = e("<div/>").addClass("input-control").addClass("switch");
            var r = e("<label/>");
            var i = e("<span/>").addClass("check");
            var s = t.clone(true);
            var o = t.parent();
            var u = e("<span/>").addClass("caption").html(t.data("caption") != undefined ? t.data("caption") : "");
            n.appendTo(o);
            r.appendTo(n);
            s.appendTo(r);
            i.appendTo(r);
            u.appendTo(r);
            t.remove();
            return n
        },
        _createInputCheckbox: function() {
            var t = this.element;
            var n = e("<div/>").addClass("input-control").addClass("checkbox");
            var r = e("<label/>");
            var i = e("<span/>").addClass("check");
            var s = t.clone(true);
            var o = t.parent();
            var u = e("<span/>").addClass("caption").html(t.data("caption") != undefined ? t.data("caption") : "");
            n.appendTo(o);
            r.appendTo(n);
            s.appendTo(r);
            i.appendTo(r);
            u.appendTo(r);
            t.remove();
            return n
        },
        _createInputRadio: function() {
            var t = this.element;
            var n = e("<div/>").addClass("input-control").addClass("radio");
            var r = e("<label/>");
            var i = e("<span/>").addClass("check");
            var s = t.clone(true);
            var o = t.parent();
            var u = e("<span/>").addClass("caption").html(t.data("caption") != undefined ? t.data("caption") : "");
            n.appendTo(o);
            r.appendTo(n);
            s.appendTo(r);
            i.appendTo(r);
            u.appendTo(r);
            t.remove();
            return n
        },
        _createInputSearch: function() {
            var t = this.element;
            var n = e("<div/>").addClass("input-control").addClass("text");
            var r = e("<button/>").addClass("btn-search");
            var i = t.clone(true);
            var s = t.parent();
            n.appendTo(s);
            i.appendTo(n);
            r.appendTo(n);
            t.remove();
            return n
        },
        _createInputTel: function() {
            var t = this.element;
            var n = e("<div/>").addClass("input-control").addClass("tel");
            var r = e("<button/>").addClass("btn-clear");
            var i = t.clone(true);
            var s = t.parent();
            n.appendTo(s);
            i.appendTo(n);
            r.appendTo(n);
            t.remove();
            return n
        },
        _createInputEmail: function() {
            var t = this.element;
            var n = e("<div/>").addClass("input-control").addClass("email");
            var r = e("<button/>").addClass("btn-clear");
            var i = t.clone(true);
            var s = t.parent();
            n.appendTo(s);
            i.appendTo(n);
            r.appendTo(n);
            t.remove();
            return n
        },
        _createInputText: function() {
            var t = this.element;
            var n = e("<div/>").addClass("input-control").addClass("text");
            var r = e("<button/>").addClass("btn-clear");
            var i = t.clone(true);
            var s = t.parent();
            n.appendTo(s);
            i.appendTo(n);
            r.appendTo(n);
            t.remove();
            return n
        },
        _createInputPassword: function() {
            var t = this.element;
            var n = e("<div/>").addClass("input-control").addClass("password");
            var r = e("<button/>").addClass("btn-reveal");
            var i = t.clone(true);
            var s = t.parent();
            n.appendTo(s);
            i.appendTo(n);
            r.appendTo(n);
            t.remove();
            return n
        },
        _createInputFile: function() {
            var t = this.element;
            var n = e("<div/>").addClass("input-control").addClass("file");
            var r = e("<button/>").addClass("btn-file");
            var i = t.clone(true);
            var s = t.parent();
            n.appendTo(s);
            i.appendTo(n);
            r.appendTo(n);
            t.remove();
            return n
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-transform=input-control]").inputTransform()
});
/* Metro List View */
(function(e) {
    e.widget("metro.listview", {
        version: "1.0.0",
        options: {
            onGroupExpand: function(e) {},
            onGroupCollapse: function(e) {},
            onListClick: function(e) {}
        },
        _create: function() {
            var t = this,
                n = this.element;
            n.children(".collapsed").children(".group-content").hide();
            n.find(".group-title").on("click", function(n) {
                var r = e(this),
                    i = r.parent(".list-group"),
                    s = i.children(".group-content");
                i.toggleClass("collapsed");
                if (i.hasClass("collapsed")) {
                    s.slideUp();
                    t.options.onGroupCollapse(i)
                } else {
                    s.slideDown();
                    t.options.onGroupExpand(i)
                }
                n.preventDefault()
            });
            n.find(".list").on("click", function(r) {
                n.find(".list").removeClass("active");
                e(this).toggleClass("active");
                t.options.onListClick(e(this));
                r.preventDefault()
            })
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=listview]").listview()
});
/* Metro Live Tile */
(function(e) {
    e.widget("metro.livetile", {
        version: "1.0.0",
        options: {
            effect: "slideLeft",
            period: 4e3,
            duration: 700,
            easing: "doubleSqrt"
        },
        _frames: {},
        _currentIndex: 0,
        _interval: 0,
        _outPosition: 0,
        _size: {},
        _create: function() {
            var t = this,
                n = this.element;
            if (n.data("effect") != undefined) {
                this.options.effect = n.data("effect")
            }
            if (n.data("direction") != undefined) {
                this.options.direction = n.data("direction")
            }
            if (n.data("period") != undefined) {
                this.options.period = n.data("period")
            }
            if (n.data("duration") != undefined) {
                this.options.duration = n.data("duration")
            }
            if (n.data("easing") != undefined) {
                this.options.easing = n.data("easing")
            }
            this._frames = n.children(".tile-content");
            if (this._frames.length <= 1) return;
            e.easing.doubleSqrt = function(e) {
                return Math.sqrt(Math.sqrt(e))
            };
            this._size = {
                width: n.width(),
                height: n.height()
            };
            this._start()
        },
        _start: function() {
            var e = this;
            this._interval = setInterval(function() {
                e._animate()
            }, this.options.period)
        },
        _animate: function() {
            var e = this._frames[this._currentIndex],
                t;
            this._currentIndex += 1;
            if (this._currentIndex >= this._frames.length) this._currentIndex = 0;
            t = this._frames[this._currentIndex];
            switch (this.options.effect) {
                case "slideLeft":
                    this._effectSlideLeft(e, t);
                    break;
                case "slideRight":
                    this._effectSlideRight(e, t);
                    break;
                case "slideDown":
                    this._effectSlideDown(e, t);
                    break;
                case "slideUpDown":
                    this._effectSlideUpDown(e, t);
                    break;
                case "slideLeftRight":
                    this._effectSlideLeftRight(e, t);
                    break;
                default:
                    this._effectSlideUp(e, t)
            }
        },
        _effectSlideLeftRight: function(e, t) {
            if (this._currentIndex % 2 == 0) this._effectSlideLeft(e, t);
            else this._effectSlideRight(e, t)
        },
        _effectSlideUpDown: function(e, t) {
            if (this._currentIndex % 2 == 0) this._effectSlideUp(e, t);
            else this._effectSlideDown(e, t)
        },
        _effectSlideUp: function(t, n) {
            var r = this._size.height;
            var i = {
                duration: this.options.duration,
                easing: this.options.easing
            };
            e(t).animate({
                top: -r
            }, i);
            e(n).css({
                top: r
            }).show().animate({
                top: 0
            }, i)
        },
        _effectSlideDown: function(t, n) {
            var r = this._size.height;
            var i = {
                duration: this.options.duration,
                easing: this.options.easing
            };
            e(t).animate({
                top: r
            }, i);
            e(n).css({
                top: -r
            }).show().animate({
                top: 0
            }, i)
        },
        _effectSlideLeft: function(t, n) {
            var r = this._size.width;
            var i = {
                duration: this.options.duration,
                easing: this.options.easing
            };
            e(t).animate({
                left: r * -1
            }, i);
            e(n).css({
                left: r
            }).show().animate({
                left: 0
            }, i)
        },
        _effectSlideRight: function(t, n) {
            var r = this._size.width;
            var i = {
                duration: this.options.duration,
                easing: this.options.easing
            };
            e(t).animate({
                left: r
            }, i);
            e(n).css({
                left: -r
            }).show().animate({
                left: 0
            }, i)
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=live-tile]").livetile()
});
/* Metro Notify */
(function(e) {
    var t = [];
    e.Notify = function(n) {
        n = e.extend({
            icon: "",
            caption: "",
            content: "",
            shadow: true,
            width: "auto",
            height: "auto",
            style: false,
            position: "top-right",
            timeout: 3e3
        }, n);
        if (n.content == "" || n.content == undefined) return;
        var r, i;
        r = e("<div/>").addClass("metro notify-wrapper");
        i = e("<div/>").addClass("notify");
        if (n.shadow) r.addClass("shadow");
        if (n.style && n.style.background != undefined) r.css("background-color", n.style.background);
        if (n.style && n.style.color != undefined) r.css("color", n.style.color);
        if (n.caption != "" && n.caption != undefined) {
            e("<div/>").addClass("caption").html(n.caption).appendTo(i)
        }
        if (n.content != "" && n.content != undefined) {
            e("<div/>").addClass("content").html(n.content).appendTo(i)
        }
        i.appendTo(r);
        if (n.width != "auto") r.css("min-width", n.width);
        if (n.height != "auto") r.css("min-height", n.width);
        r.hide().appendTo("body").fadeIn("fast");
        t.push(i);
        if (n.position == "default" || n.position == "bottom-right") {
            var s = 5;
            e.each(t, function(e, n) {
                if (e == t.length - 1) return;
                s += n.parent(".notify-wrapper").outerHeight() + 5
            });
            r.css({
                bottom: s,
                right: 5
            })
        } else if (n.position == "top-right") {
            var o = 5;
            e.each(t, function(e, n) {
                if (e == t.length - 1) return;
                o += n.parent(".notify-wrapper").outerHeight() + 5
            });
            r.css({
                top: o,
                right: 5
            })
        } else if (n.position == "bottom-left") {
            var s = 5;
            e.each(t, function(e, n) {
                if (e == t.length - 1) return;
                s += n.parent(".notify-wrapper").outerHeight() + 5
            });
            r.css({
                bottom: s,
                left: 5
            })
        } else {
            var o = 5;
            e.each(t, function(e, n) {
                if (e == t.length - 1) return;
                o += n.parent(".notify-wrapper").outerHeight() + 5
            });
            r.css({
                top: o,
                left: 5
            })
        }
        setTimeout(function() {
            e.Notify.close(i)
        }, n.timeout)
    };
    e.Notify.show = function(t, n) {
        e.Notify({
            content: t,
            caption: n
        })
    };
    e.Notify.close = function(n) {
        if (n == undefined) {
            return false
        }
        var r = n.parent(".notify-wrapper");
        r.fadeOut(function() {
            e(this).remove();
            t.splice(t.indexOf(n), 1)
        });
        return true
    }
})(jQuery);
/* Metro Progressbar */
(function(e) {
    e.widget("metro.progressbar", {
        version: "1.0.0",
        options: {
            value: 0,
            color: "bg-cyan",
            animate: false,
            onchange: function(e) {}
        },
        _create: function() {
            var e = this,
                t = this.element;
            if (t.data("value") != undefined) {
                this.value(t.data("value") + "%")
            }
            if (t.data("color") != undefined) {
                this.options.color = t.data("color")
            }
            if (t.data("animate") != undefined) {
                this.options.animate = t.data("animate")
            }
            this._showBar()
        },
        _showBar: function() {
            var t = this.element;
            t.html("");
            var n = e("<div />");
            n.addClass("bar");
            if (this.options.color.indexOf("bg-") + 1) n.addClass(this.options.color);
            else {
                n.css("background", this.options.color)
            }
            n.appendTo(t);
            if (this.options.animate) {
                n.animate({
                    width: this.value() + "%"
                })
            } else {
                n.css("width", this.value() + "%")
            }
            this.options.onchange(this.value())
        },
        value: function(e) {
            if (e != undefined) {
                this.options.value = parseInt(e);
                this._showBar()
            } else {
                return parseInt(this.options.value)
            }
        },
        color: function(e) {
            this.options.color = e;
            if (this.options.color.indexOf("bg-") + 1) this.element.find(".bar").addClass(this.options.color);
            else {
                this.element.find(".bar").css("background", this.options.color)
            }
            this._showBar()
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=progress-bar]").progressbar()
});
/* Metro Rating */
(function(e) {
    e.widget("metro.rating", {
        version: "1.0.0",
        options: {
            score: 0,
            half: false,
            stars: 5,
            "static": true,
            hints: ["bad", "poor", "regular", "good", "gorgeous"],
            showHint: false,
            showScore: false,
            scoreHint: "Current score: ",
            click: function(e, t) {}
        },
        _create: function() {
            var e = this,
                t = this.element;
            if (t.data("score") != undefined) {
                this.options.score = t.data("score")
            }
            if (t.data("half") != undefined) {
                this.options.half = t.data("half")
            }
            if (t.data("stars") != undefined) {
                this.options.stars = t.data("stars")
            }
            if (t.data("showHint") != undefined) {
                this.options.showHint = t.data("showHint")
            }
            if (t.data("static") != undefined) {
                this.options.static = t.data("static")
            }
            if (t.data("showScore") != undefined) {
                this.options.showScore = t.data("showScore")
            }
            if (t.data("scoreHint") != undefined) {
                this.options.scoreHint = t.data("scoreHint")
            }
            this._showRating()
        },
        rate: function(e) {
            this.options.score = e;
            this._showRating()
        },
        _showRating: function() {
            var t = this,
                n = this.element,
                r = this.options,
                i, s;
            n.addClass("rating");
            n.html("");
            i = e("<ul/>");
            if (!r.static) {
                n.addClass("active")
            }
            for (var o = 0; o < r.stars; o++) {
                s = e("<li/>");
                s.data("value", o + 1);
                if (r.showHint) s.attr("title", r.hints[o]);
                if (o <= r.score - 1) {
                    s.addClass("rated")
                }
                s.on("click", function() {
                    r.click(e(this).data("value"), t)
                });
                s.appendTo(i)
            }
            i.appendTo(n);
            if (r.showScore) {
                e("<span/>").addClass("score-hint").html(r.scoreHint + r.score).appendTo(n)
            } else {
                n.find("ul").css("margin-bottom", 0)
            }
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=rating]").rating()
});
/* Metro Slider */
(function(e) {
    e.widget("metro.slider", {
        version: "1.0.0",
        options: {
            position: 0,
            accuracy: 0,
            color: "default",
            completeColor: "default",
            markerColor: "default",
            colors: [],
            showHint: false,
            change: function(e, t) {},
            changed: function(e, t) {},
            _slider: {
                vertical: false,
                offset: 0,
                length: 0,
                marker: 0,
                ppp: 0,
                start: 0,
                stop: 0
            }
        },
        _create: function() {
            var e = this,
                t = this.element,
                n = this.options,
                r = this.options._slider;
            if (t.data("accuracy") != undefined) {
                n.accuracy = t.data("accuracy") > 0 ? t.data("accuracy") : 0
            }
            if (t.data("position") != undefined) {
                n.position = this._correctValue(t.data("position") > 0 ? t.data("position") > 100 ? 100 : t.data("position") : 0)
            }
            if (t.data("color") != undefined) {
                n.color = t.data("color")
            }
            if (t.data("completeColor") != undefined) {
                n.completeColor = t.data("completeColor")
            }
            if (t.data("markerColor") != undefined) {
                n.markerColor = t.data("markerColor")
            }
            if (t.data("colors") != undefined) {
                n.colors = t.data("colors").split(",")
            }
            if (t.data("showHint") != undefined) {
                n.showHint = t.data("showHint")
            }
            r.vertical = t.hasClass("vertical");
            this._createSlider();
            this._initPoints();
            this._placeMarker(n.position);
            addTouchEvents(t[0]);
            t.children(".marker").on("mousedown", function(t) {
                t.preventDefault();
                e._startMoveMarker(t)
            });
            t.on("mousedown", function(t) {
                t.preventDefault();
                e._startMoveMarker(t)
            })
        },
        _startMoveMarker: function(t) {
            var n = this.element,
                r = this.options,
                i = this,
                s = n.children(".hint");
            e(n).on("mousemove", function(e) {
                i._movingMarker(e);
                if (!n.hasClass("permanent-hint")) {
                    s.css("display", "block")
                }
            });
            e(n).on("mouseup", function() {
                e(n).off("mousemove");
                n.off("mouseup");
                n.data("value", i.options.position);
                n.trigger("changed", i.options.position);
                r.changed(i.options.position, n);
                if (!n.hasClass("permanent-hint")) {
                    s.css("display", "none")
                }
            });
            this._initPoints();
            this._movingMarker(t)
        },
        _movingMarker: function(e) {
            var t, n, r, i = this.options._slider.vertical,
                s = this.options._slider.offset,
                o = this.options._slider.start,
                u = this.options._slider.stop,
                a = this.options._slider.length,
                f = this.options._slider.marker;
            if (i) {
                t = e.pageY - s
            } else {
                t = e.pageX - s
            }
            if (t < o) {
                t = o
            } else if (t > u) {
                t = u
            }
            if (i) {
                r = a - t - f / 2
            } else {
                r = t - f / 2
            }
            n = this._pixToPerc(r);
            this._placeMarker(n);
            this.options.position = n;
            this.options.change(Math.round(n), this.element)
        },
        _placeMarker: function(e) {
            var t, n, r = this.options,
                i = 0,
                s = 0,
                o = 0,
                u = this.element.children(".marker"),
                a = this.element.children(".complete"),
                f = this.element.children(".hint");
            i = r.colors.length;
            o = r._slider.length / i;
            if (this.options._slider.vertical) {
                t = this._percToPix(e) + this.options._slider.marker;
                n = this.options._slider.length - t;
                u.css("top", n);
                a.css("height", t);
                if (i) {
                    s = Math.round(t / o) - 1;
                    a.css("background-color", r.colors[s < 0 ? 0 : s])
                }
                if (r.showHint) {
                    f.html(Math.round(e)).css("top", n - f.height() / 2)
                }
            } else {
                t = this._percToPix(e);
                u.css("left", t);
                a.css("width", t);
                if (i) {
                    s = Math.round(t / o) - 1;
                    a.css("background-color", r.colors[s < 0 ? 0 : s])
                }
                if (r.showHint) {
                    f.html(Math.round(e)).css("left", t - f.width() / 2)
                }
            }
        },
        _pixToPerc: function(e) {
            var t;
            t = e * this.options._slider.ppp;
            return this._correctValue(t)
        },
        _percToPix: function(e) {
            if (this.options._slider.ppp === 0) {
                return 0
            }
            return e / this.options._slider.ppp
        },
        _correctValue: function(e) {
            var t = this.options.accuracy;
            if (t === 0) {
                return e
            }
            if (e === 100) {
                return 100
            }
            e = Math.floor(e / t) * t + Math.round(e % t / t) * t;
            if (e > 100) {
                return 100
            }
            return e
        },
        _initPoints: function() {
            var e = this.options._slider,
                t = this.element;
            if (e.vertical) {
                e.offset = t.offset().top;
                e.length = t.height();
                e.marker = t.children(".marker").height()
            } else {
                e.offset = t.offset().left;
                e.length = t.width();
                e.marker = t.children(".marker").width()
            }
            e.ppp = 100 / (e.length - e.marker);
            e.start = e.marker / 2;
            e.stop = e.length - e.marker / 2
        },
        _createSlider: function() {
            var t = this.element,
                n = this.options,
                r, i, s;
            t.html("");
            r = e("<div/>").addClass("complete").appendTo(t);
            i = e("<a/>").addClass("marker").appendTo(t);
            if (n.showHint) {
                s = e("<span/>").addClass("hint").appendTo(t)
            }
            if (n.color != "default") {
                t.css("background-color", n.color)
            }
            if (n.completeColor != "default") {
                r.css("background-color", n.completeColor)
            }
            if (n.markerColor != "default") {
                i.css("background-color", n.markerColor)
            }
        },
        value: function(e) {
            if (typeof e !== "undefined") {
                this._placeMarker(parseInt(e));
                this.options.position = parseInt(e);
                this.options.change(Math.round(parseInt(e)), this.element);
                return this
            } else {
                return Math.round(this.options.position)
            }
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=slider]").slider()
});
/* Metro Tab Control */
(function(e) {
    e.widget("metro.tabcontrol", {
        version: "1.0.0",
        options: {
            effect: "none",
            activateStoredTab: false,
            tabclick: function(e) {},
            tabchange: function(e) {}
        },
        _create: function() {
            var t = this,
                n = this.element,
                r = e(n.children(".tabs")).children("li"),
                i = e(n.children(".frames")).children(".frame"),
                s = n.attr("id");
            if (n.data("effect") != undefined) {
                this.options.effect = n.data("effect")
            }
            this.init(r, i);
            r.each(function() {
                var n = e(this).children("a");
                n.on("click", function(o) {
                    o.preventDefault();
                    t.options.tabclick(this);
                    if (e(this).parent().hasClass("disabled")) {
                        return false
                    }
                    r.removeClass("active");
                    n.parent("li").addClass("active");
                    i.hide();
                    var u = e(n.attr("href"));
                    switch (t.options.effect) {
                        case "slide":
                            u.slideDown();
                            break;
                        case "fade":
                            u.fadeIn();
                            break;
                        default:
                            u.show()
                    }
                    t._trigger("change", null, u);
                    t.options.tabchange(this);
                    if (s != undefined) window.localStorage.setItem(s + "-current-tab", e(this).attr("href"))
                })
            });
            if (this.options.activateStoredTab) this._activateStoredTab(r)
        },
        init: function(t, n) {
            var r = this;
            t.each(function() {
                if (e(this).hasClass("active")) {
                    var t = e(e(e(this).children("a")).attr("href"));
                    n.hide();
                    t.show();
                    r._trigger("change", null, t)
                }
            })
        },
        _activateStoredTab: function(t) {
            var n = window.localStorage.getItem(this.element.attr("id") + "-current-tab");
            if (n != undefined) {
                t.each(function() {
                    var t = e(this).children("a");
                    if (t.attr("href") == n) {
                        t.click()
                    }
                })
            }
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=tab-control]").tabcontrol()
});
/* Metro Table */
(function(e) {
    e.widget("metro.tablecontrol", {
        version: "1.0.0",
        options: {
            width: "100%",
            height: "auto",
            cls: "table",
            checkRow: false,
            colModel: [],
            data: []
        },
        _create: function() {
            var e = this.element,
                t;
            e.css({
                width: this.options.width,
                height: this.options.height
            });
            t = this.createTable(e);
            this.addHeader(t, this.options.colModel);
            this.addTableData(t, this.options.data);
            t.addClass(this.options.cls)
        },
        addHeader: function(t, n) {
            var r = e("<thead/>").appendTo(t);
            var i, s = e("<tr/>").appendTo(r);
            e.each(n, function(t, n) {
                i = e("<th/>").addClass(n.hcls).html(n.caption).appendTo(s)
            })
        },
        createTable: function(t) {
            return e("<table/>").appendTo(t)
        },
        addTableData: function(t, n) {
            var r = this,
                i = e("<tbody/>").appendTo(t);
            e.each(n, function(e, t) {
                r.addRowData(i, t)
            })
        },
        addRowData: function(t, n) {
            var r, i = e("<tr/>").appendTo(t);
            if (n.__row_class != undefined) {
                i.addClass(n.__row_class)
            }
            e.each(this.options.colModel, function(t, s) {
                r = e("<td/>").css("width", s.width).addClass(s.cls).html(n[s.field]).appendTo(i)
            })
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=table]").tablecontrol()
});
/* Metro Times */
(function(e) {
    e.widget("metro.times", {
        version: "1.0.0",
        options: {
            style: {
                background: "bg-dark",
                foreground: "fg-white",
                divider: "fg-dark"
            },
            blink: true,
            alarm: {
                h: 0,
                m: 0,
                s: 0
            },
            ontick: function(e, t, n) {},
            onalarm: function() {}
        },
        wrappers: {},
        _interval: 0,
        _create: function() {
            var t = this,
                n = this.element;
            e.each(["Hours", "Minutes", "Seconds"], function() {
                e('<span class="count' + this + '">').html('<span class="digit-wrapper">                        <span class="digit">0</span>                    </span>                    <span class="digit-wrapper">                        <span class="digit">0</span>                    </span>').appendTo(n);
                if (this != "Seconds") {
                    n.append('<span class="divider"></span>')
                }
            });
            this.wrappers = this.element.find(".digit-wrapper");
            if (n.data("blink") != undefined) {
                this.options.blink = n.data("blick")
            }
            if (n.data("styleBackground") != undefined) {
                this.options.style.background = n.data("styleBackground")
            }
            if (n.data("styleForeground") != undefined) {
                this.options.style.foreground = n.data("styleForeground")
            }
            if (n.data("styleDivider") != undefined) {
                this.options.style.divider = n.data("styleDivider")
            }
            if (this.options.style.background != "default") {
                this.element.find(".digit").addClass(this.options.style.background)
            }
            if (this.options.style.foreground != "default") {
                this.element.find(".digit").addClass(this.options.style.foreground)
            }
            if (this.options.style.divider != "default") {
                this.element.find(".divider").addClass(this.options.style.divider)
            }
            if (n.data("alarm") != undefined) {
                var r = n.data("alarm").split(":");
                this.options.alarm.h = r[0] != undefined ? r[0] : 0;
                this.options.alarm.m = r[1] != undefined ? r[1] : 0;
                this.options.alarm.s = r[2] != undefined ? r[2] : 0
            }
            if (n.data("onalarm") != undefined) {}
            setTimeout(function() {
                t.tick()
            }, 1e3)
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        },
        tick: function() {
            var e = this;
            this._interval = setInterval(function() {
                var t = new Date;
                var n, r, i;
                n = t.getHours();
                e.updateDuo(0, 1, n);
                r = t.getMinutes();
                e.updateDuo(2, 3, r);
                i = t.getSeconds();
                e.updateDuo(4, 5, i);
                e.options.ontick(n, r, i);
                e.blinkDivider();
                var s = e.options.alarm;
                if (s) {
                    if (s.h != undefined && s.h == n && s.m != undefined && s.m == r && s.s != undefined && s.s == i) {
                        e.options.onalarm();
                        e._trigger("alarm")
                    }
                }
            }, 1e3)
        },
        blinkDivider: function() {
            if (this.options.blink) this.element.find(".divider").toggleClass("no-visible")
        },
        updateDuo: function(e, t, n) {
            this.switchDigit(this.wrappers.eq(e), Math.floor(n / 10) % 10);
            this.switchDigit(this.wrappers.eq(t), n % 10)
        },
        switchDigit: function(t, n) {
            var r = t.find(".digit");
            if (r.is(":animated")) {
                return false
            }
            if (t.data("digit") == n) {
                return false
            }
            t.data("digit", n);
            var i = e("<span>", {
                "class": "digit",
                css: {
                    top: "-2.1em",
                    opacity: 0
                },
                html: n
            });
            i.addClass(this.options.style.background);
            i.addClass(this.options.style.foreground);
            r.before(i).removeClass("static").animate({
                top: "2.5em",
                opacity: 0
            }, "fast", function() {
                r.remove()
            });
            i.delay(100).animate({
                top: 0,
                opacity: 1
            }, "fast");
            return true
        }
    })
})(jQuery);
$(function() {
    $("[data-role=times]").times()
});

/* Metro Treeview */
(function(e) {
    e.widget("metro.treeview", {
        version: "1.0.0",
        options: {
            onNodeClick: function(e) {}
        },
        _create: function() {
            var t = this,
                n = this.element;
            n.find(".node.collapsed").find("ul").hide();
            n.find(".node > a").on("click", function(n) {
                var r = e(this),
                    i = r.parent("li");
                i.toggleClass("collapsed");
                if (i.hasClass("collapsed")) {
                    i.children("ul").fadeOut("fast")
                } else {
                    i.children("ul").fadeIn("fast")
                }
                t.options.onNodeClick(i);
                n.preventDefault()
            });
            n.find("a").on("click", function(r) {
                var i = e(this),
                    s = i.parent("li");
                n.find("a").parent("li").removeClass("active");
                if (s.hasClass("node")) return;
                s.toggleClass("active");
                t.options.onNodeClick(s);
                r.preventDefault()
            })
        },
        _destroy: function() {},
        _setOption: function(e, t) {
            this._super("_setOption", e, t)
        }
    })
})(jQuery);
$(function() {
    $("[data-role=treeview]").treeview()
});
/*
 * jQuery UI Touch Punch 0.2.2
 *
 * Copyright 2011, Dave Furfero
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Depends:
 *  jquery.ui.widget.js
 *  jquery.ui.mouse.js
 */
(function(b) {
    b.support.touch = "ontouchend" in document;
    if (!b.support.touch) {
        return;
    }
    var c = b.ui.mouse.prototype,
        e = c._mouseInit,
        a;

    function d(g, h) {
        if (g.originalEvent.touches.length > 1) {
            return;
        }
        g.preventDefault();
        var i = g.originalEvent.changedTouches[0],
            f = document.createEvent("MouseEvents");
        f.initMouseEvent(h, true, true, window, 1, i.screenX, i.screenY, i.clientX, i.clientY, false, false, false, false, 0, null);
        g.target.dispatchEvent(f);
    }
    c._touchStart = function(g) {
        var f = this;
        if (a || !f._mouseCapture(g.originalEvent.changedTouches[0])) {
            return;
        }
        a = true;
        f._touchMoved = false;
        d(g, "mouseover");
        d(g, "mousemove");
        d(g, "mousedown");
    };
    c._touchMove = function(f) {
        if (!a) {
            return;
        }
        this._touchMoved = true;
        d(f, "mousemove");
    };
    c._touchEnd = function(f) {
        if (!a) {
            return;
        }
        d(f, "mouseup");
        d(f, "mouseout");
        if (!this._touchMoved) {
            d(f, "click");
        }
        a = false;
    };
    c._mouseInit = function() {
        var f = this;
        f.element.bind("touchstart", b.proxy(f, "_touchStart")).bind("touchmove", b.proxy(f, "_touchMove")).bind("touchend", b.proxy(f, "_touchEnd"));
        e.call(f);
    };
})(jQuery);